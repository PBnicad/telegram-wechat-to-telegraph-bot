name: Deploy to Cloudflare Workers

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - development

jobs:
  # 郄检查作业
  pre-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check code formatting
        run: npm run lint:check || echo "No lint script found, skipping..."

      - name: Validate configuration
        run: |
          echo "🔍 Validating configuration files..."
          if [ ! -f "wrangler.toml" ]; then
            echo "❌ wrangler.toml not found"
            exit 1
          fi
          if [ ! -f "schema.sql" ]; then
            echo "❌ schema.sql not found"
            exit 1
          fi
          echo "✅ Configuration files are valid"

  # 数据库迁移作业
  database-migration:
    runs-on: ubuntu-latest
    needs: pre-check
    if: github.event_name != 'pull_request'
    environment: ${{ inputs.environment || 'production' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Create D1 Database
        run: |
          echo "🗄️ Creating D1 database..."
          if [ "${{ inputs.environment }}" = "production" ]; then
            DB_NAME="telegram-wechat-bot-prod"
          else
            DB_NAME="telegram-wechat-bot-dev"
          fi

          # 尝试获取现有数据库
          DB_INFO=$(npx wrangler d1 list --format=json 2>/dev/null || echo "[]")

          # 检查是否已存在
          if echo "$DB_INFO" | jq -e ".[] | select(.name) | contains(\"$DB_NAME\")" > /dev/null; then
            echo "✅ Database '$DB_NAME' already exists"
          else
            echo "🆕 Creating database '$DB_NAME'..."
            npx wrangler d1 create "$DB_NAME" || echo "Database may already exist"
          fi

      - name: Run Database Migrations
        run: |
          echo "🔄 Running database migrations..."
          npx wrangler d1 execute wechat-bot-db --file=schema.sql --remote || echo "Migrations may have already been applied"

  # 部署作业
  deploy:
    runs-on: ubuntu-latest
    needs: [pre-check, database-migration]
    if: github.event_name != 'pull_request'
    environment: ${{ inputs.environment || 'production' }}
    outputs:
      url:
        description: 'The deployed worker URL'
        value: ${{ steps.deploy.outputs.url }}
      deployment-id:
        description: 'The deployment ID'
        value: ${{ steps.deploy.outputs.id }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Validate Environment Variables
        run: |
          echo "🔑 Validating required secrets..."
          if [ -z "${{ secrets.TELEGRAM_BOT_TOKEN }}" ]; then
            echo "❌ TELEGRAM_BOT_TOKEN secret is required"
            exit 1
          fi
          if [ -z "${{ secrets.SUPER_ADMIN_ID }}" ]; then
            echo "❌ SUPER_ADMIN_ID secret is required"
            exit 1
          fi
          echo "✅ All required secrets are configured"

      - name: Deploy to Cloudflare Workers
        id: deploy
        run: |
          echo "🚀 Deploying to Cloudflare Workers..."
          if [ "${{ inputs.environment }}" = "production" ]; then
            npx wrangler deploy --env production
          else
            npx wrangler deploy --env development
          fi

      - name: Set Webhook
        if: ${{ steps.deploy.outputs.url }}
        run: |
          echo "🔗 Setting up Telegram webhook..."
          WEBHOOK_URL="${{ steps.deploy.outputs.url }}"

          # 删除现有webhook
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/deleteWebhook" \
            -H "Content-Type: application/json" \
            -d '{"drop_pending_updates": true}' || echo "No existing webhook to delete"

          # 设置新webhook
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/setWebhook" \
            -H "Content-Type: application/json" \
            -d "{\"url\": \"${WEBHOOK_URL}\", \"drop_pending_updates\": true}" \
            && echo "✅ Webhook configured successfully" \
            || echo "❌ Failed to configure webhook"

      - name: Verify Deployment
        run: |
          echo "🔍 Verifying deployment..."
          sleep 5

          # 检查健康状态
          HEALTH_URL="${{ steps.deploy.outputs.url }}/health"
          HEALTH_CHECK=$(curl -s "$HEALTH_URL" || echo "unhealthy")

          if echo "$HEALTH_CHECK" | grep -q "healthy"; then
            echo "✅ Deployment is healthy"
          else
            echo "⚠️ Deployment may have issues, check logs"
            echo "Health check response: $HEALTH_CHECK"
          fi

      - name: Deployment Summary
        run: |
          echo "📊 Deployment Summary:"
          echo "Environment: ${{ inputs.environment || 'production' }}"
          echo "Worker URL: ${{ steps.deploy.outputs.url }}"
          echo "Deployment ID: ${{ steps.deploy.outputs.id }}"
          echo "Status: ✅ Successfully deployed"

  # PR预览部署
  preview:
    runs-on: ubuntu-latest
    needs: pre-check
    if: github.event_name == 'pull_request'
    environment: preview
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Wrangler
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}

      - name: Deploy Preview
        run: |
          echo "🔍 Deploying preview for PR #${{ github.event.number }}"
          npx wrangler deploy --env preview || echo "Preview deployment completed"

  # 安全扫描
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'